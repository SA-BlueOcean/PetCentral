// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Location {
  id           String  @id @default(cuid())
  latitude     Float
  longitude    Float
  locationName String?
  zipCode      String?
  userId       String  @unique
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  // default oauth fields
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // custom fields
  firstName       String?
  lastName        String?
  createdAt       DateTime? @default(now())
  profilePhotoUrl String?   @db.Text
  bannerPhotoUrl  String?   @db.Text
  bio             String?   @db.Text

  location Location?
  friendsA Friend[]  @relation("FriendA")
  friendsB Friend[]  @relation("FriendB")
  posts    Post[]
  pets     Pet[]
  groups   Group[]
  comments Comment[]
  votes    Votes[]
}

enum FriendStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Friend {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  friendA   User         @relation("FriendA", fields: [friendAId], references: [id])
  friendAId String
  friendB   User         @relation("FriendB", fields: [friendBId], references: [id])
  friendBId String
  status    FriendStatus
}

model Animal {
  id   Int    @id @default(autoincrement())
  name String @unique

  breeds Breed[]

  @@index([name])
}

model Breed {
  id   Int    @id @default(autoincrement())
  name String

  animalId Int
  animal   Animal @relation(fields: [animalId], references: [id])
  pets     Pet[]

  @@unique([name, animalId])
  @@index([name])
}

model Pet {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])

  breedId Int
  breed   Breed @relation(fields: [breedId], references: [id])

  firstName String
  lastName  String?
  photoUrl  String? @db.Text

  dateOfBirth DateTime?
}

model Group {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  description    String?
  photoUrl       String? @db.Text
  bannerPhotoUrl String? @db.Text

  members User[]
  posts   Post[]
}

model Photo {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  url String @db.Text

  postId Int?
  post   Post? @relation(fields: [postId], references: [id])

  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id])
}

model Post {
  id      Int    @id @default(autoincrement())
  content String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  upvotes     Int @default(0)
  downvotes   Int @default(0)
  numComments Int @default(0)

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])

  groupId String?
  group   Group?  @relation(fields: [groupId], references: [id])

  photos   Photo[]
  comments Comment[]
  votes    Votes[]
}

model Votes {
  id     Int    @id @default(autoincrement())
  userId String
  postId Int
  vote   Int    @default(0) @db.SmallInt

  User User @relation(fields: [userId], references: [id])
  Post Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
  @@index([postId, userId])
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  upvotes   Int @default(0)
  downvotes Int @default(0)

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])

  postId Int
  post   Post @relation(fields: [postId], references: [id])

  photos Photo[]
}
